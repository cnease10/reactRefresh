{"ast":null,"code":"var _jsxFileName = \"/Users/cierranease/reactRefresh/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // class Square extends React.Component {\n//     //initialize state with a constructor\n//     // constructor(props) {\n//     //     super(props);\n//     //     //In JS classes, we need super when defining the constructor of a subclass\n//     //     //In React, all component classes should start with a super(props) call\n//     //     this.state = {\n//     //         value: null,\n//     //     };\n//     // }\n//     //DELETED constructor since Sqauare does not manage game state anymore\n//     //Square is now a controlled component\n//     render() {\n//       return (\n//           //show the value passed by renderSquare\n//           //adding on click - onClick={function() {alert('click');}} or\n//           //onClick={() => alert('click')}\n//           //need to pass the function or it will alert every time React re-renders\n//           //onClick={function() {alert('click');}} becomes onClick={() => this.setState({value: 'X'})}\n//         <button \n//            className=\"square\" \n//            onClick={() => this.props.onClick() }\n//         >\n//           {this.props.value}\n//         </button>\n//         //{this.props.value} is now {this.state.value}\n//         //lifting state - replacing {this.state.value} with {this.props.value}\n//         //replacing this.setState({value: 'X'}) with this.props.OnClick()\n//       );\n//     }\n//   }\n//Create function component for Square\n//does not have its own state\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, props.value);\n} // class Board extends React.Component {\n//     //initialize with constructor to add state \n//   //   constructor(props) {\n//   //       super(props);\n//   //       this.state = {\n//   //           squares : Array(9).fill(null),\n//   //           xIsNext: true,\n//   //       }\n//   //   }\n//   //Deleted constructor because we are now adding state to the top level game component\n//   //   handleClick(i) {\n//   //       const squares = this.state.squares.slice();\n//   //       if (calculateWinner(squares) || squares[i]) {\n//   //           return;\n//   //       }\n//   //       squares[i] = this.state.xIsNext ? 'X' : 'O';\n//   //       this.setState({\n//   //           squares: squares,\n//   //           xIsNext: !this.state.xIsNext,\n//   //         });\n//   //   }\n//   //Moving this handleClick logic to game component since state is now there\n//   renderSquare(i) {\n//     return (\n//     <Square \n//       value ={this.props.squares[i]} \n//       onClick={() => this.props.onClick(i)}\n//     />\n//     );\n//     //passing a prop called value to square with Square value={i} \n//     //replacing Square value={i} with value={this.state.squares[i]}\n//     //this.state.squares is reading from the array that we added to our state\n//     //each square now receives a value prop\n//     //lifting state -need to pass a function from board to square to have square call \n//     //replaced  value={this.state.squares[i] with\n//     //value = {this.state.squares[i]} and onClick={() => this.handleClick(i)}\n//   }\n//   render() {\n//       // const winner = calculateWinner(this.state.squares);\n//       // let status;\n//       // if (winner) {\n//       //     status = 'Winner' + winner;\n//       // }\n//       // else {\n//       //     status = 'Next player:' +(this.state.xIsNext ? 'X' : 'O');\n//       // }\n//       //^^ this is now handled in Game component\n//     //const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n//     return (\n//       <div>\n//         <div className=\"board-row\">\n//           {this.renderSquare(0)}\n//           {this.renderSquare(1)}\n//           {this.renderSquare(2)}\n//         </div>\n//         <div className=\"board-row\">\n//           {this.renderSquare(3)}\n//           {this.renderSquare(4)}\n//           {this.renderSquare(5)}\n//         </div>\n//         <div className=\"board-row\">\n//           {this.renderSquare(6)}\n//           {this.renderSquare(7)}\n//           {this.renderSquare(8)}\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n\nclass Game extends React.Component {\n  //initializing state\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xIsNext: true,\n      stepNumber: 0\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  } //array.push vs array.concat\n  //array.push mutates the original array\n\n\n  render() {\n    const history = this.state.history; // const current = history[history.length - 1] to history[this.state.stepNumber]\n    // instead of always rendering the last move, we should render the currently selected move\n\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares); //mapping the history of moves \n    //for each move in history, we create a <li> which contains a <button>\n\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to start';\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: move,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.jumpTo(move),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }\n      }, desc));\n    });\n    let status;\n\n    if (winner) {\n      status = 'Winner' + winner;\n    } else {\n      status = 'Next player:' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }\n    }, status), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }, moves)));\n  }\n\n}\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n} //for an array of 9 squares, this function checks for a winner returns 'X' or 'O' or null\n// ========================================\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Game, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/cierranease/reactRefresh/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Game","Component","constructor","state","history","squares","Array","fill","xIsNext","stepNumber","handleClick","i","slice","current","length","calculateWinner","setState","concat","jumpTo","step","render","winner","moves","map","move","desc","status","lines","a","b","c","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;;AACE,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACnB,sBACI;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAEA,KAAK,CAACC,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,KAAK,CAACE,KADX,CADJ;AAKH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,IAAN,SAAmBN,KAAK,CAACO,SAAzB,CAAmC;AAC/B;AACAC,EAAAA,WAAW,CAACL,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKM,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,CAAC;AACNC,QAAAA,OAAO,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd;AADH,OAAD,CADA;AAITC,MAAAA,OAAO,EAAE,IAJA;AAKTC,MAAAA,UAAU,EAAE;AALH,KAAb;AAOH;;AACCC,EAAAA,WAAW,CAACC,CAAD,EAAI;AACb,UAAMP,OAAO,GAAG,KAAKD,KAAL,CAAWC,OAAX,CAAmBQ,KAAnB,CAAyB,CAAzB,EAA4B,KAAKT,KAAL,CAAWM,UAAX,GAAwB,CAAp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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// class Square extends React.Component {\n//     //initialize state with a constructor\n//     // constructor(props) {\n//     //     super(props);\n//     //     //In JS classes, we need super when defining the constructor of a subclass\n//     //     //In React, all component classes should start with a super(props) call\n//     //     this.state = {\n//     //         value: null,\n//     //     };\n//     // }\n\n//     //DELETED constructor since Sqauare does not manage game state anymore\n//     //Square is now a controlled component\n\n//     render() {\n//       return (\n//           //show the value passed by renderSquare\n//           //adding on click - onClick={function() {alert('click');}} or\n//           //onClick={() => alert('click')}\n//           //need to pass the function or it will alert every time React re-renders\n//           //onClick={function() {alert('click');}} becomes onClick={() => this.setState({value: 'X'})}\n//         <button \n//            className=\"square\" \n//            onClick={() => this.props.onClick() }\n//         >\n//           {this.props.value}\n//         </button>\n//         //{this.props.value} is now {this.state.value}\n\n//         //lifting state - replacing {this.state.value} with {this.props.value}\n//         //replacing this.setState({value: 'X'}) with this.props.OnClick()\n//       );\n//     }\n//   }\n\n\n//Create function component for Square\n//does not have its own state\n  function Square(props) {\n      return (\n          <button className=\"square\" onClick={props.onClick} >\n              {props.value}\n          </button>\n      );\n  }\n  \n  // class Board extends React.Component {\n  //     //initialize with constructor to add state \n  //   //   constructor(props) {\n  //   //       super(props);\n  //   //       this.state = {\n  //   //           squares : Array(9).fill(null),\n  //   //           xIsNext: true,\n  //   //       }\n  //   //   }\n\n  //   //Deleted constructor because we are now adding state to the top level game component\n\n  //   //   handleClick(i) {\n  //   //       const squares = this.state.squares.slice();\n  //   //       if (calculateWinner(squares) || squares[i]) {\n  //   //           return;\n  //   //       }\n  //   //       squares[i] = this.state.xIsNext ? 'X' : 'O';\n  //   //       this.setState({\n  //   //           squares: squares,\n  //   //           xIsNext: !this.state.xIsNext,\n  //   //         });\n  //   //   }\n\n  //   //Moving this handleClick logic to game component since state is now there\n  //   renderSquare(i) {\n  //     return (\n  //     <Square \n  //       value ={this.props.squares[i]} \n  //       onClick={() => this.props.onClick(i)}\n  //     />\n  //     );\n  //     //passing a prop called value to square with Square value={i} \n  //     //replacing Square value={i} with value={this.state.squares[i]}\n  //     //this.state.squares is reading from the array that we added to our state\n  //     //each square now receives a value prop\n\n  //     //lifting state -need to pass a function from board to square to have square call \n  //     //replaced  value={this.state.squares[i] with\n  //     //value = {this.state.squares[i]} and onClick={() => this.handleClick(i)}\n\n  //   }\n  \n  //   render() {\n  //       // const winner = calculateWinner(this.state.squares);\n  //       // let status;\n  //       // if (winner) {\n  //       //     status = 'Winner' + winner;\n  //       // }\n  //       // else {\n  //       //     status = 'Next player:' +(this.state.xIsNext ? 'X' : 'O');\n  //       // }\n  //       //^^ this is now handled in Game component\n\n  //     //const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n  \n  //     return (\n  //       <div>\n        \n  //         <div className=\"board-row\">\n  //           {this.renderSquare(0)}\n  //           {this.renderSquare(1)}\n  //           {this.renderSquare(2)}\n  //         </div>\n  //         <div className=\"board-row\">\n  //           {this.renderSquare(3)}\n  //           {this.renderSquare(4)}\n  //           {this.renderSquare(5)}\n  //         </div>\n  //         <div className=\"board-row\">\n  //           {this.renderSquare(6)}\n  //           {this.renderSquare(7)}\n  //           {this.renderSquare(8)}\n  //         </div>\n  //       </div>\n  //     );\n  //   }\n  // }\n  \n  class Game extends React.Component {\n      //initializing state\n      constructor(props) {\n          super(props);\n          this.state = {\n              history: [{\n                  squares: Array(9).fill(null),\n              }],\n              xIsNext: true,\n              stepNumber: 0,\n          };\n      }\n        handleClick(i) {\n          const history = this.state.history.slice(0, this.state.stepNumber + 1);\n          const current = history[history.length -1];\n          const squares = current.squares.slice();\n          if (calculateWinner(squares) || squares[i]) {\n              return;\n          }\n          squares[i] = this.state.xIsNext ? 'X' : 'O';\n          this.setState({\n            history: history.concat([{\n                squares: squares\n            }]),\n              stepNumber: history.length,\n              xIsNext: !this.state.xIsNext,\n            });\n      }\n      jumpTo(step) {\n          this.setState({\n              stepNumber: step,\n              xIsNext: (step % 2) === 0,\n          });\n      }\n\n      //array.push vs array.concat\n      //array.push mutates the original array\n\n    render() {\n        const history = this.state.history;\n        // const current = history[history.length - 1] to history[this.state.stepNumber]\n        // instead of always rendering the last move, we should render the currently selected move\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n        //mapping the history of moves \n        //for each move in history, we create a <li> which contains a <button>\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n            'Go to move #' + move :\n            'Go to start';\n            return(\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            )\n        })\n        let status;\n        if (winner) {\n            status = 'Winner' + winner;\n        } \n        else {\n            status = 'Next player:' + (this.state.xIsNext ? 'X' : 'O');\n        }\n       \n\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board \n                squares = {current.squares}\n                onClick={(i) => this.handleClick(i)}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div>{status }</div>\n            <ol>{moves}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n  //for an array of 9 squares, this function checks for a winner returns 'X' or 'O' or null\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  "]},"metadata":{},"sourceType":"module"}