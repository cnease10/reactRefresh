{"ast":null,"code":"var _jsxFileName = \"/Users/cierranease/reactRefresh/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game'; // class Square extends React.Component {\n//     //initialize state with a constructor\n//     // constructor(props) {\n//     //     super(props);\n//     //     //In JS classes, we need super when defining the constructor of a subclass\n//     //     //In React, all component classes should start with a super(props) call\n//     //     this.state = {\n//     //         value: null,\n//     //     };\n//     // }\n//     //DELETED constructor since Sqauare does not manage game state anymore\n//     //Square is now a controlled component\n//     render() {\n//       return (\n//           //show the value passed by renderSquare\n//           //adding on click - onClick={function() {alert('click');}} or\n//           //onClick={() => alert('click')}\n//           //need to pass the function or it will alert every time React re-renders\n//           //onClick={function() {alert('click');}} becomes onClick={() => this.setState({value: 'X'})}\n//         <button \n//            className=\"square\" \n//            onClick={() => this.props.onClick() }\n//         >\n//           {this.props.value}\n//         </button>\n//         //{this.props.value} is now {this.state.value}\n//         //lifting state - replacing {this.state.value} with {this.props.value}\n//         //replacing this.setState({value: 'X'}) with this.props.OnClick()\n//       );\n//     }\n//   }\n//Create function component for Square\n//does not have its own state\n// function Square(props) {\n//     return (\n//         <button className=\"square\" onClick={props.onClick} >\n//             {props.value}\n//         </button>\n//     );\n// }\n// class Board extends React.Component {\n//     //initialize with constructor to add state \n//   //   constructor(props) {\n//   //       super(props);\n//   //       this.state = {\n//   //           squares : Array(9).fill(null),\n//   //           xIsNext: true,\n//   //       }\n//   //   }\n//   //Deleted constructor because we are now adding state to the top level game component\n//   //   handleClick(i) {\n//   //       const squares = this.state.squares.slice();\n//   //       if (calculateWinner(squares) || squares[i]) {\n//   //           return;\n//   //       }\n//   //       squares[i] = this.state.xIsNext ? 'X' : 'O';\n//   //       this.setState({\n//   //           squares: squares,\n//   //           xIsNext: !this.state.xIsNext,\n//   //         });\n//   //   }\n//   //Moving this handleClick logic to game component since state is now there\n//   renderSquare(i) {\n//     return (\n//     <Square \n//       value ={this.props.squares[i]} \n//       onClick={() => this.props.onClick(i)}\n//     />\n//     );\n//     //passing a prop called value to square with Square value={i} \n//     //replacing Square value={i} with value={this.state.squares[i]}\n//     //this.state.squares is reading from the array that we added to our state\n//     //each square now receives a value prop\n//     //lifting state -need to pass a function from board to square to have square call \n//     //replaced  value={this.state.squares[i] with\n//     //value = {this.state.squares[i]} and onClick={() => this.handleClick(i)}\n//   }\n//   render() {\n//       // const winner = calculateWinner(this.state.squares);\n//       // let status;\n//       // if (winner) {\n//       //     status = 'Winner' + winner;\n//       // }\n//       // else {\n//       //     status = 'Next player:' +(this.state.xIsNext ? 'X' : 'O');\n//       // }\n//       //^^ this is now handled in Game component\n//     //const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n//     return (\n//       <div>\n//         <div className=\"board-row\">\n//           {this.renderSquare(0)}\n//           {this.renderSquare(1)}\n//           {this.renderSquare(2)}\n//         </div>\n//         <div className=\"board-row\">\n//           {this.renderSquare(3)}\n//           {this.renderSquare(4)}\n//           {this.renderSquare(5)}\n//         </div>\n//         <div className=\"board-row\">\n//           {this.renderSquare(6)}\n//           {this.renderSquare(7)}\n//           {this.renderSquare(8)}\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n// class Game extends React.Component {\n//     //initializing state\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             history: [{\n//                 squares: Array(9).fill(null),\n//             }],\n//             xIsNext: true,\n//             stepNumber: 0,\n//         };\n//     }\n//       handleClick(i) {\n//         const history = this.state.history.slice(0, this.state.stepNumber + 1);\n//         const current = history[history.length -1];\n//         const squares = current.squares.slice();\n//         if (calculateWinner(squares) || squares[i]) {\n//             return;\n//         }\n//         squares[i] = this.state.xIsNext ? 'X' : 'O';\n//         this.setState({\n//           history: history.concat([{\n//               squares: squares\n//           }]),\n//             stepNumber: history.length,\n//             xIsNext: !this.state.xIsNext,\n//           });\n//     }\n//     jumpTo(step) {\n//         this.setState({\n//             stepNumber: step,\n//             xIsNext: (step % 2) === 0,\n//         });\n//     }\n//     //array.push vs array.concat\n//     //array.push mutates the original array\n//   render() {\n//       const history = this.state.history;\n//       // const current = history[history.length - 1] to history[this.state.stepNumber]\n//       // instead of always rendering the last move, we should render the currently selected move\n//       const current = history[this.state.stepNumber];\n//       const winner = calculateWinner(current.squares);\n//       //mapping the history of moves \n//       //for each move in history, we create a <li> which contains a <button>\n//       const moves = history.map((step, move) => {\n//           const desc = move ?\n//           'Go to move #' + move :\n//           'Go to start';\n//           return(\n//               <li key={move}>\n//                   <button onClick={() => this.jumpTo(move)}>{desc}</button>\n//               </li>\n//           )\n//       })\n//       let status;\n//       if (winner) {\n//           status = 'Winner' + winner;\n//       } \n//       else {\n//           status = 'Next player:' + (this.state.xIsNext ? 'X' : 'O');\n//       }\n//     return (\n//       <div className=\"game\">\n//         <div className=\"game-board\">\n//           <Board \n//               squares = {current.squares}\n//               onClick={(i) => this.handleClick(i)}\n//           />\n//         </div>\n//         <div className=\"game-info\">\n//           <div>{status }</div>\n//           <ol>{moves}</ol>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n// function calculateWinner(squares) {\n//   const lines = [\n//     [0, 1, 2],\n//     [3, 4, 5],\n//     [6, 7, 8],\n//     [0, 3, 6],\n//     [1, 4, 7],\n//     [2, 5, 8],\n//     [0, 4, 8],\n//     [2, 4, 6],\n//   ];\n//   for (let i = 0; i < lines.length; i++) {\n//     const [a, b, c] = lines[i];\n//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n//       return squares[a];\n//     }\n//   }\n//   return null;\n// }\n//for an array of 9 squares, this function checks for a winner returns 'X' or 'O' or null\n// ========================================\n\nReactDOM.render( /*#__PURE__*/React.createElement(Game, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/cierranease/reactRefresh/src/index.js"],"names":["React","ReactDOM","Game","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,QAAjeACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\n// class Square extends React.Component {\n//     //initialize state with a constructor\n//     // constructor(props) {\n//     //     super(props);\n//     //     //In JS classes, we need super when defining the constructor of a subclass\n//     //     //In React, all component classes should start with a super(props) call\n//     //     this.state = {\n//     //         value: null,\n//     //     };\n//     // }\n\n//     //DELETED constructor since Sqauare does not manage game state anymore\n//     //Square is now a controlled component\n\n//     render() {\n//       return (\n//           //show the value passed by renderSquare\n//           //adding on click - onClick={function() {alert('click');}} or\n//           //onClick={() => alert('click')}\n//           //need to pass the function or it will alert every time React re-renders\n//           //onClick={function() {alert('click');}} becomes onClick={() => this.setState({value: 'X'})}\n//         <button \n//            className=\"square\" \n//            onClick={() => this.props.onClick() }\n//         >\n//           {this.props.value}\n//         </button>\n//         //{this.props.value} is now {this.state.value}\n\n//         //lifting state - replacing {this.state.value} with {this.props.value}\n//         //replacing this.setState({value: 'X'}) with this.props.OnClick()\n//       );\n//     }\n//   }\n\n\n//Create function component for Square\n//does not have its own state\n  // function Square(props) {\n  //     return (\n  //         <button className=\"square\" onClick={props.onClick} >\n  //             {props.value}\n  //         </button>\n  //     );\n  // }\n  \n  // class Board extends React.Component {\n  //     //initialize with constructor to add state \n  //   //   constructor(props) {\n  //   //       super(props);\n  //   //       this.state = {\n  //   //           squares : Array(9).fill(null),\n  //   //           xIsNext: true,\n  //   //       }\n  //   //   }\n\n  //   //Deleted constructor because we are now adding state to the top level game component\n\n  //   //   handleClick(i) {\n  //   //       const squares = this.state.squares.slice();\n  //   //       if (calculateWinner(squares) || squares[i]) {\n  //   //           return;\n  //   //       }\n  //   //       squares[i] = this.state.xIsNext ? 'X' : 'O';\n  //   //       this.setState({\n  //   //           squares: squares,\n  //   //           xIsNext: !this.state.xIsNext,\n  //   //         });\n  //   //   }\n\n  //   //Moving this handleClick logic to game component since state is now there\n  //   renderSquare(i) {\n  //     return (\n  //     <Square \n  //       value ={this.props.squares[i]} \n  //       onClick={() => this.props.onClick(i)}\n  //     />\n  //     );\n  //     //passing a prop called value to square with Square value={i} \n  //     //replacing Square value={i} with value={this.state.squares[i]}\n  //     //this.state.squares is reading from the array that we added to our state\n  //     //each square now receives a value prop\n\n  //     //lifting state -need to pass a function from board to square to have square call \n  //     //replaced  value={this.state.squares[i] with\n  //     //value = {this.state.squares[i]} and onClick={() => this.handleClick(i)}\n\n  //   }\n  \n  //   render() {\n  //       // const winner = calculateWinner(this.state.squares);\n  //       // let status;\n  //       // if (winner) {\n  //       //     status = 'Winner' + winner;\n  //       // }\n  //       // else {\n  //       //     status = 'Next player:' +(this.state.xIsNext ? 'X' : 'O');\n  //       // }\n  //       //^^ this is now handled in Game component\n\n  //     //const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n  \n  //     return (\n  //       <div>\n        \n  //         <div className=\"board-row\">\n  //           {this.renderSquare(0)}\n  //           {this.renderSquare(1)}\n  //           {this.renderSquare(2)}\n  //         </div>\n  //         <div className=\"board-row\">\n  //           {this.renderSquare(3)}\n  //           {this.renderSquare(4)}\n  //           {this.renderSquare(5)}\n  //         </div>\n  //         <div className=\"board-row\">\n  //           {this.renderSquare(6)}\n  //           {this.renderSquare(7)}\n  //           {this.renderSquare(8)}\n  //         </div>\n  //       </div>\n  //     );\n  //   }\n  // }\n  \n  // class Game extends React.Component {\n  //     //initializing state\n  //     constructor(props) {\n  //         super(props);\n  //         this.state = {\n  //             history: [{\n  //                 squares: Array(9).fill(null),\n  //             }],\n  //             xIsNext: true,\n  //             stepNumber: 0,\n  //         };\n  //     }\n  //       handleClick(i) {\n  //         const history = this.state.history.slice(0, this.state.stepNumber + 1);\n  //         const current = history[history.length -1];\n  //         const squares = current.squares.slice();\n  //         if (calculateWinner(squares) || squares[i]) {\n  //             return;\n  //         }\n  //         squares[i] = this.state.xIsNext ? 'X' : 'O';\n  //         this.setState({\n  //           history: history.concat([{\n  //               squares: squares\n  //           }]),\n  //             stepNumber: history.length,\n  //             xIsNext: !this.state.xIsNext,\n  //           });\n  //     }\n  //     jumpTo(step) {\n  //         this.setState({\n  //             stepNumber: step,\n  //             xIsNext: (step % 2) === 0,\n  //         });\n  //     }\n\n  //     //array.push vs array.concat\n  //     //array.push mutates the original array\n\n  //   render() {\n  //       const history = this.state.history;\n  //       // const current = history[history.length - 1] to history[this.state.stepNumber]\n  //       // instead of always rendering the last move, we should render the currently selected move\n  //       const current = history[this.state.stepNumber];\n  //       const winner = calculateWinner(current.squares);\n  //       //mapping the history of moves \n  //       //for each move in history, we create a <li> which contains a <button>\n\n  //       const moves = history.map((step, move) => {\n  //           const desc = move ?\n  //           'Go to move #' + move :\n  //           'Go to start';\n  //           return(\n  //               <li key={move}>\n  //                   <button onClick={() => this.jumpTo(move)}>{desc}</button>\n  //               </li>\n  //           )\n  //       })\n  //       let status;\n  //       if (winner) {\n  //           status = 'Winner' + winner;\n  //       } \n  //       else {\n  //           status = 'Next player:' + (this.state.xIsNext ? 'X' : 'O');\n  //       }\n       \n\n  //     return (\n  //       <div className=\"game\">\n  //         <div className=\"game-board\">\n  //           <Board \n  //               squares = {current.squares}\n  //               onClick={(i) => this.handleClick(i)}\n  //           />\n  //         </div>\n  //         <div className=\"game-info\">\n  //           <div>{status }</div>\n  //           <ol>{moves}</ol>\n  //         </div>\n  //       </div>\n  //     );\n  //   }\n  // }\n\n  // function calculateWinner(squares) {\n  //   const lines = [\n  //     [0, 1, 2],\n  //     [3, 4, 5],\n  //     [6, 7, 8],\n  //     [0, 3, 6],\n  //     [1, 4, 7],\n  //     [2, 5, 8],\n  //     [0, 4, 8],\n  //     [2, 4, 6],\n  //   ];\n  //   for (let i = 0; i < lines.length; i++) {\n  //     const [a, b, c] = lines[i];\n  //     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n  //       return squares[a];\n  //     }\n  //   }\n  //   return null;\n  // }\n  //for an array of 9 squares, this function checks for a winner returns 'X' or 'O' or null\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  "]},"metadata":{},"sourceType":"module"}