{"ast":null,"code":"var _jsxFileName = \"/Users/cierranease/reactRefresh/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // class Square extends React.Component {\n//     //initialize state with a constructor\n//     // constructor(props) {\n//     //     super(props);\n//     //     //In JS classes, we need super when defining the constructor of a subclass\n//     //     //In React, all component classes should start with a super(props) call\n//     //     this.state = {\n//     //         value: null,\n//     //     };\n//     // }\n//     //DELETED constructor since Sqauare does not manage game state anymore\n//     //Square is now a controlled component\n//     render() {\n//       return (\n//           //show the value passed by renderSquare\n//           //adding on click - onClick={function() {alert('click');}} or\n//           //onClick={() => alert('click')}\n//           //need to pass the function or it will alert every time React re-renders\n//           //onClick={function() {alert('click');}} becomes onClick={() => this.setState({value: 'X'})}\n//         <button \n//            className=\"square\" \n//            onClick={() => this.props.onClick() }\n//         >\n//           {this.props.value}\n//         </button>\n//         //{this.props.value} is now {this.state.value}\n//         //lifting state - replacing {this.state.value} with {this.props.value}\n//         //replacing this.setState({value: 'X'}) with this.props.OnClick()\n//       );\n//     }\n//   }\n//Create function component for Square\n//does not have its own state\n\nfunction Square(props) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  //initialize with constructor to add state \n  //   constructor(props) {\n  //       super(props);\n  //       this.state = {\n  //           squares : Array(9).fill(null),\n  //           xIsNext: true,\n  //       }\n  //   }\n  //Deleted constructor because we are now adding state to the top level game component\n  //   handleClick(i) {\n  //       const squares = this.state.squares.slice();\n  //       if (calculateWinner(squares) || squares[i]) {\n  //           return;\n  //       }\n  //       squares[i] = this.state.xIsNext ? 'X' : 'O';\n  //       this.setState({\n  //           squares: squares,\n  //           xIsNext: !this.state.xIsNext,\n  //         });\n  //   }\n  //Moving this handleClick logic to game component since state is now there\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }); //passing a prop called value to square with Square value={i} \n    //replacing Square value={i} with value={this.state.squares[i]}\n    //this.state.squares is reading from the array that we added to our state\n    //each square now receives a value prop\n    //lifting state -need to pass a function from board to square to have square call \n    //replaced  value={this.state.squares[i] with\n    //value = {this.state.squares[i]} and onClick={() => this.handleClick(i)}\n  }\n\n  render() {\n    // const winner = calculateWinner(this.state.squares);\n    // let status;\n    // if (winner) {\n    //     status = 'Winner' + winner;\n    // }\n    // else {\n    //     status = 'Next player:' +(this.state.xIsNext ? 'X' : 'O');\n    // }\n    //^^ this is now handled in Game component\n    //const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n}\n\nclass Game extends React.Component {\n  //initializing state\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext\n    });\n  } //array.push vs array.concat\n  //array.push mutates the original array\n\n\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares); //mapping the history of moves \n    //for each move in history, we create a <li> which contains a <button>\n\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to start';\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: move,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.jumpTo(move),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }\n      }, desc));\n    });\n    let status;\n\n    if (winner) {\n      status = 'Winner' + winner;\n    } else {\n      status = 'Next player:' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }\n    }, status), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }\n    }, moves)));\n  }\n\n}\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n} //for an array of 9 squares, this function checks for a winner returns 'X' or 'O' or null\n// ========================================\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Game, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/cierranease/reactRefresh/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","Game","constructor","state","history","Array","fill","xIsNext","handleClick","current","length","slice","calculateWinner","setState","concat","winner","moves","map","step","move","desc","jumpTo","status","lines","a","b","c","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// class Square extends React.Component {\n//     //initialize state with a constructor\n//     // constructor(props) {\n//     //     super(props);\n//     //     //In JS classes, we need super when defining the constructor of a subclass\n//     //     //In React, all component classes should start with a super(props) call\n//     //     this.state = {\n//     //         value: null,\n//     //     };\n//     // }\n\n//     //DELETED constructor since Sqauare does not manage game state anymore\n//     //Square is now a controlled component\n\n//     render() {\n//       return (\n//           //show the value passed by renderSquare\n//           //adding on click - onClick={function() {alert('click');}} or\n//           //onClick={() => alert('click')}\n//           //need to pass the function or it will alert every time React re-renders\n//           //onClick={function() {alert('click');}} becomes onClick={() => this.setState({value: 'X'})}\n//         <button \n//            className=\"square\" \n//            onClick={() => this.props.onClick() }\n//         >\n//           {this.props.value}\n//         </button>\n//         //{this.props.value} is now {this.state.value}\n\n//         //lifting state - replacing {this.state.value} with {this.props.value}\n//         //replacing this.setState({value: 'X'}) with this.props.OnClick()\n//       );\n//     }\n//   }\n\n\n//Create function component for Square\n//does not have its own state\n  function Square(props) {\n      return (\n          <button className=\"square\" onClick={props.onClick} >\n              {props.value}\n          </button>\n      );\n  }\n  \n  class Board extends React.Component {\n      //initialize with constructor to add state \n    //   constructor(props) {\n    //       super(props);\n    //       this.state = {\n    //           squares : Array(9).fill(null),\n    //           xIsNext: true,\n    //       }\n    //   }\n\n    //Deleted constructor because we are now adding state to the top level game component\n\n    //   handleClick(i) {\n    //       const squares = this.state.squares.slice();\n    //       if (calculateWinner(squares) || squares[i]) {\n    //           return;\n    //       }\n    //       squares[i] = this.state.xIsNext ? 'X' : 'O';\n    //       this.setState({\n    //           squares: squares,\n    //           xIsNext: !this.state.xIsNext,\n    //         });\n    //   }\n\n    //Moving this handleClick logic to game component since state is now there\n    renderSquare(i) {\n      return (\n      <Square \n        value ={this.props.squares[i]} \n        onClick={() => this.props.onClick(i)}\n      />\n      );\n      //passing a prop called value to square with Square value={i} \n      //replacing Square value={i} with value={this.state.squares[i]}\n      //this.state.squares is reading from the array that we added to our state\n      //each square now receives a value prop\n\n      //lifting state -need to pass a function from board to square to have square call \n      //replaced  value={this.state.squares[i] with\n      //value = {this.state.squares[i]} and onClick={() => this.handleClick(i)}\n\n    }\n  \n    render() {\n        // const winner = calculateWinner(this.state.squares);\n        // let status;\n        // if (winner) {\n        //     status = 'Winner' + winner;\n        // }\n        // else {\n        //     status = 'Next player:' +(this.state.xIsNext ? 'X' : 'O');\n        // }\n        //^^ this is now handled in Game component\n\n      //const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n  \n      return (\n        <div>\n        \n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  class Game extends React.Component {\n      //initializing state\n      constructor(props) {\n          super(props);\n          this.state = {\n              history: [{\n                  squares: Array(9).fill(null),\n              }],\n              xIsNext: true,\n          };\n      }\n        handleClick(i) {\n          const history = this.state.history;\n          const current = history[history.length -1];\n          const squares = current.squares.slice();\n          if (calculateWinner(squares) || squares[i]) {\n              return;\n          }\n          squares[i] = this.state.xIsNext ? 'X' : 'O';\n          this.setState({\n            history: history.concat([{\n                squares: squares\n            }]),\n              xIsNext: !this.state.xIsNext,\n            });\n      }\n\n      //array.push vs array.concat\n      //array.push mutates the original array\n\n    render() {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const winner = calculateWinner(current.squares);\n        //mapping the history of moves \n        //for each move in history, we create a <li> which contains a <button>\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n            'Go to move #' + move :\n            'Go to start';\n            return(\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            )\n        })\n        let status;\n        if (winner) {\n            status = 'Winner' + winner;\n        } \n        else {\n            status = 'Next player:' + (this.state.xIsNext ? 'X' : 'O');\n        }\n       \n\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board \n                squares = {current.squares}\n                onClick={(i) => this.handleClick(i)}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div>{status }</div>\n            <ol>{moves}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n  //for an array of 9 squares, this function checks for a winner returns 'X' or 'O' or null\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  "]},"metadata":{},"sourceType":"module"}